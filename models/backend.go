// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO Console Server
// Copyright (c) 2021 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Backend backend
//
// swagger:model backend
type Backend struct {

	// offline disks
	OfflineDisks BackendDisks `json:"OfflineDisks,omitempty"`

	// online disks
	OnlineDisks BackendDisks `json:"OnlineDisks,omitempty"`

	// r r s c parity
	RRSCParity int32 `json:"RRSCParity,omitempty"`

	// standard s c parity
	StandardSCParity int32 `json:"StandardSCParity,omitempty"`

	// type
	// Enum: [0 1 2]
	Type int64 `json:"Type,omitempty"`
}

// Validate validates this backend
func (m *Backend) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOfflineDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnlineDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Backend) validateOfflineDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.OfflineDisks) { // not required
		return nil
	}

	if err := m.OfflineDisks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OfflineDisks")
		}
		return err
	}

	return nil
}

func (m *Backend) validateOnlineDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.OnlineDisks) { // not required
		return nil
	}

	if err := m.OnlineDisks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OnlineDisks")
		}
		return err
	}

	return nil
}

var backendTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendTypeTypePropEnum = append(backendTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *Backend) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, backendTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Backend) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Backend) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Backend) UnmarshalBinary(b []byte) error {
	var res Backend
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
