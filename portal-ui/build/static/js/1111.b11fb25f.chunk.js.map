{"version":3,"file":"static/js/1111.b11fb25f.chunk.js","mappings":"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","sources":["screens/Console/NotificationEndpoints/ConfirmDeleteTargetModal.tsx","screens/Console/NotificationEndpoints/ListNotificationEndpoints.tsx","screens/Console/NotificationEndpoints/utils.ts","../node_modules/@mui/icons-material/FiberManualRecord.js"],"sourcesContent":["import React from \"react\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { ConfirmModalIcon } from \"mds\";\nimport { DialogContentText } from \"@mui/material\";\n\nconst ConfirmDeleteTargetModal = ({\n  onConfirm,\n  onClose,\n  serviceName,\n  status,\n}: {\n  onConfirm: () => void;\n  onClose: () => void;\n  serviceName: string;\n  status: string;\n}) => {\n  return (\n    <ConfirmDialog\n      title={`Delete Endpoint`}\n      confirmText={\"Delete\"}\n      isOpen={true}\n      titleIcon={<ConfirmModalIcon />}\n      isLoading={false}\n      onConfirm={onConfirm}\n      onClose={onClose}\n      confirmationContent={\n        <React.Fragment>\n          <DialogContentText>\n            Are you sure you want to delete the notification endpoint ?\n            <br />\n            <b>{serviceName}</b> which is <b>{status}</b>\n          </DialogContentText>\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nexport default ConfirmDeleteTargetModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Button, HelpBox } from \"mds\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { LinearProgress } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport Grid from \"@mui/material/Grid\";\nimport FiberManualRecordIcon from \"@mui/icons-material/FiberManualRecord\";\nimport {\n  NotificationEndpointItem,\n  NotificationEndpointsList,\n  TransformedEndpointItem,\n} from \"./types\";\nimport { getNotificationConfigKey, notificationTransform } from \"./utils\";\nimport { AddIcon, LambdaIcon } from \"mds\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\n\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  settingsCommon,\n  tableStyles,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport { RefreshIcon } from \"mds\";\nimport AButton from \"../Common/AButton/AButton\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport SearchBox from \"../Common/SearchBox\";\n\nimport { IAM_PAGES } from \"../../../common/SecureComponent/permissions\";\nimport {\n  setErrorSnackMessage,\n  setServerNeedsRestart,\n} from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport ConfirmDeleteTargetModal from \"./ConfirmDeleteTargetModal\";\nimport TooltipWrapper from \"../Common/TooltipWrapper/TooltipWrapper\";\n\ninterface IListNotificationEndpoints {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...actionsTray,\n    ...settingsCommon,\n    ...containerForHeader(theme.spacing(4)),\n    twHeight: {\n      minHeight: 400,\n    },\n    tableBlock: {\n      ...tableStyles.tableBlock,\n    },\n    rightActionItems: {\n      display: \"flex\",\n      alignItems: \"center\",\n      \"& button\": {\n        whiteSpace: \"nowrap\",\n      },\n    },\n    searchField: {\n      ...searchField.searchField,\n      maxWidth: 380,\n    },\n  });\n\nconst ListNotificationEndpoints = ({ classes }: IListNotificationEndpoints) => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  //Local States\n  const [records, setRecords] = useState<TransformedEndpointItem[]>([]);\n  const [filter, setFilter] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [isDelConfirmOpen, setIsDelConfirmOpen] = useState<boolean>(false);\n  const [selNotifyEndPoint, setSelNotifyEndpoint] =\n    useState<TransformedEndpointItem | null>();\n\n  //Effects\n  // load records on mount\n  useEffect(() => {\n    if (isLoading) {\n      const fetchRecords = () => {\n        api\n          .invoke(\"GET\", `/api/v1/admin/notification_endpoints`)\n          .then((res: NotificationEndpointsList) => {\n            let resNotEndList: NotificationEndpointItem[] = [];\n            if (res.notification_endpoints !== null) {\n              resNotEndList = res.notification_endpoints;\n            }\n            setRecords(notificationTransform(resNotEndList));\n            setIsLoading(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            dispatch(setErrorSnackMessage(err));\n            setIsLoading(false);\n          });\n      };\n      fetchRecords();\n    }\n  }, [isLoading, dispatch]);\n\n  useEffect(() => {\n    setIsLoading(true);\n  }, []);\n\n  const resetNotificationConfig = (\n    ep: TransformedEndpointItem | undefined | null\n  ) => {\n    if (ep?.name) {\n      const configKey = getNotificationConfigKey(ep.name);\n      let accountId = `:${ep.account_id}`;\n      if (configKey) {\n        api\n          .invoke(\"POST\", `/api/v1/configs/${configKey}${accountId}/reset`)\n          .then((res) => {\n            dispatch(setServerNeedsRestart(true));\n            setSelNotifyEndpoint(null);\n            setIsDelConfirmOpen(false);\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setIsDelConfirmOpen(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      } else {\n        setSelNotifyEndpoint(null);\n        setIsDelConfirmOpen(false);\n        console.log(`Unable to find Config key for ${ep.name}`);\n      }\n    }\n  };\n\n  const confirmDelNotifyEndpoint = (record: TransformedEndpointItem) => {\n    setSelNotifyEndpoint(record);\n    setIsDelConfirmOpen(true);\n  };\n\n  const tableActions = [{ type: \"delete\", onClick: confirmDelNotifyEndpoint }];\n\n  const filteredRecords = records.filter((b: TransformedEndpointItem) => {\n    if (filter === \"\") {\n      return true;\n    }\n    return b.service_name.indexOf(filter) >= 0;\n  });\n\n  const statusDisplay = (status: string) => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        <FiberManualRecordIcon\n          style={status === \"Offline\" ? { color: red[500] } : {}}\n        />\n        {status}\n      </div>\n    );\n  };\n\n  return (\n    <Fragment>\n      <PageLayout>\n        <Grid item xs={12} className={classes.actionsTray}>\n          <SearchBox\n            placeholder=\"Search target\"\n            onChange={setFilter}\n            overrideClass={classes.searchField}\n            value={filter}\n          />\n          <div className={classes.rightActionItems}>\n            <TooltipWrapper tooltip={\"Refresh List\"}>\n              <Button\n                id={\"reload-notification-endpoints\"}\n                label={\"Refresh\"}\n                variant=\"regular\"\n                icon={<RefreshIcon />}\n                onClick={() => {\n                  setIsLoading(true);\n                }}\n              />\n            </TooltipWrapper>\n            <TooltipWrapper tooltip={\"Add Notification Target\"}>\n              <Button\n                id={\"add-notification-target\"}\n                label={\" Add Notification Target\"}\n                variant=\"callAction\"\n                icon={<AddIcon />}\n                onClick={() => {\n                  navigate(IAM_PAGES.NOTIFICATIONS_ENDPOINTS_ADD);\n                }}\n              />\n            </TooltipWrapper>\n          </div>\n        </Grid>\n        {isLoading && <LinearProgress />}\n        {!isLoading && (\n          <Fragment>\n            {records.length > 0 && (\n              <Fragment>\n                <Grid item xs={12} className={classes.tableBlock}>\n                  <TableWrapper\n                    itemActions={tableActions}\n                    columns={[\n                      {\n                        label: \"Status\",\n                        elementKey: \"status\",\n                        renderFunction: statusDisplay,\n                        width: 150,\n                      },\n                      { label: \"Service\", elementKey: \"service_name\" },\n                    ]}\n                    isLoading={isLoading}\n                    records={filteredRecords}\n                    entityName=\"Notification Endpoints\"\n                    idField=\"service_name\"\n                    customPaperHeight={classes.twHeight}\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <HelpBox\n                    title={\"Notification Endpoints\"}\n                    iconComponent={<LambdaIcon />}\n                    help={\n                      <Fragment>\n                        MinIO bucket notifications allow administrators to send\n                        notifications to supported external services on certain\n                        object or bucket events. MinIO supports bucket and\n                        object-level S3 events similar to the Amazon S3 Event\n                        Notifications.\n                        <br />\n                        <br />\n                        You can learn more at our{\" \"}\n                        <a\n                          href=\"https://min.io/docs/minio/linux/administration/monitoring/bucket-notifications.html?ref=con\"\n                          target=\"_blank\"\n                          rel=\"noopener\"\n                        >\n                          documentation\n                        </a>\n                        .\n                      </Fragment>\n                    }\n                  />\n                </Grid>\n              </Fragment>\n            )}\n            {records.length === 0 && (\n              <Grid\n                container\n                justifyContent={\"center\"}\n                alignContent={\"center\"}\n                alignItems={\"center\"}\n              >\n                <Grid item xs={8}>\n                  <HelpBox\n                    title={\"Notification Targets\"}\n                    iconComponent={<LambdaIcon />}\n                    help={\n                      <Fragment>\n                        MinIO bucket notifications allow administrators to send\n                        notifications to supported external services on certain\n                        object or bucket events. MinIO supports bucket and\n                        object-level S3 events similar to the Amazon S3 Event\n                        Notifications.\n                        <br />\n                        <br />\n                        To get started,{\" \"}\n                        <AButton\n                          onClick={() => {\n                            navigate(IAM_PAGES.NOTIFICATIONS_ENDPOINTS_ADD);\n                          }}\n                        >\n                          Add a Notification Target\n                        </AButton>\n                        .\n                      </Fragment>\n                    }\n                  />\n                </Grid>\n              </Grid>\n            )}\n          </Fragment>\n        )}\n\n        {isDelConfirmOpen ? (\n          <ConfirmDeleteTargetModal\n            onConfirm={() => {\n              resetNotificationConfig(selNotifyEndPoint);\n            }}\n            status={`${selNotifyEndPoint?.status}`}\n            serviceName={`${selNotifyEndPoint?.service_name}`}\n            onClose={() => {\n              setIsDelConfirmOpen(false);\n            }}\n          />\n        ) : null}\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(ListNotificationEndpoints);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { NotificationEndpointItem } from \"./types\";\n\nimport { IElementValue } from \"../Configurations/types\";\n\nexport const notifyPostgres = \"notify_postgres\";\nexport const notifyMysql = \"notify_mysql\";\nexport const notifyKafka = \"notify_kafka\";\nexport const notifyAmqp = \"notify_amqp\";\nexport const notifyMqtt = \"notify_mqtt\";\nexport const notifyRedis = \"notify_redis\";\nexport const notifyNats = \"notify_nats\";\nexport const notifyElasticsearch = \"notify_elasticsearch\";\nexport const notifyWebhooks = \"notify_webhook\";\nexport const notifyNsq = \"notify_nsq\";\n\nexport const notificationTransform = (\n  notificationElements: NotificationEndpointItem[]\n) => {\n  return notificationElements.map((element) => {\n    return {\n      service_name: `${element.service}:${element.account_id}`,\n      name: element.service,\n      account_id: element.account_id,\n      status: element.status,\n    };\n  });\n};\n\nexport const servicesList = [\n  {\n    actionTrigger: notifyPostgres,\n    targetTitle: \"PostgreSQL\",\n    logo: \"/postgres-logo.svg\",\n  },\n  {\n    actionTrigger: notifyKafka,\n    targetTitle: \"Kafka\",\n    logo: \"/kafka-logo.svg\",\n  },\n  {\n    actionTrigger: notifyAmqp,\n    targetTitle: \"AMQP\",\n    logo: \"/amqp-logo.svg\",\n  },\n  {\n    actionTrigger: notifyMqtt,\n    targetTitle: \"MQTT\",\n    logo: \"/mqtt-logo.svg\",\n  },\n  {\n    actionTrigger: notifyRedis,\n    targetTitle: \"Redis\",\n    logo: \"/redis-logo.svg\",\n  },\n  {\n    actionTrigger: notifyNats,\n    targetTitle: \"NATS\",\n    logo: \"/nats-logo.svg\",\n  },\n  {\n    actionTrigger: notifyMysql,\n    targetTitle: \"Mysql\",\n    logo: \"/mysql-logo.svg\",\n  },\n  {\n    actionTrigger: notifyElasticsearch,\n    targetTitle: \"Elastic Search\",\n    logo: \"/elasticsearch-logo.svg\",\n  },\n  {\n    actionTrigger: notifyWebhooks,\n    targetTitle: \"Webhook\",\n    logo: \"/webhooks-logo.svg\",\n  },\n  {\n    actionTrigger: notifyNsq,\n    targetTitle: \"NSQ\",\n    logo: \"/nsq-logo.svg\",\n  },\n];\n\nconst commonFields = [\n  {\n    name: \"queue_dir\",\n    label: \"Queue Directory\",\n    required: false,\n\n    tooltip: \"staging dir for undelivered messages e.g. '/home/events'\",\n    type: \"string\",\n    placeholder: \"Enter Queue Directory\",\n  },\n  {\n    name: \"queue_limit\",\n    label: \"Queue Limit\",\n    required: false,\n\n    tooltip: \"maximum limit for undelivered messages, defaults to '10000'\",\n    type: \"number\",\n    placeholder: \"Enter Queue Limit\",\n  },\n  {\n    name: \"comment\",\n    label: \"Comment\",\n    required: false,\n    type: \"comment\",\n    placeholder: \"Enter custom notes if any\",\n  },\n];\n\nexport const removeEmptyFields = (formFields: IElementValue[]) => {\n  const nonEmptyFields = formFields.filter((field) => field.value !== \"\");\n\n  return nonEmptyFields;\n};\n\nexport const notificationEndpointsFields: any = {\n  [notifyKafka]: [\n    {\n      name: \"brokers\",\n      label: \"Brokers\",\n      required: true,\n\n      tooltip: \"Comma separated list of Kafka broker addresses\",\n      type: \"string\",\n      placeholder: \"Enter Brokers\",\n    },\n    {\n      name: \"topic\",\n      label: \"Topic\",\n      tooltip: \"Kafka topic used for bucket notifications\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"sasl_username\",\n      label: \"SASL Username\",\n      tooltip: \"Username for SASL/PLAIN or SASL/SCRAM authentication\",\n      type: \"string\",\n      placeholder: \"Enter SASL Username\",\n    },\n    {\n      name: \"sasl_password\",\n      label: \"SASL Password\",\n      tooltip: \"Password for SASL/PLAIN or SASL/SCRAM authentication\",\n      type: \"string\",\n      placeholder: \"Enter SASL Password\",\n    },\n    {\n      name: \"sasl_mechanism\",\n      label: \"SASL Mechanism\",\n      tooltip: \"SASL authentication mechanism, default 'PLAIN'\",\n      type: \"string\",\n    },\n    {\n      name: \"tls_client_auth\",\n      label: \"TLS Client Auth\",\n      tooltip:\n        \"Client Auth determines the Kafka server's policy for TLS client auth\",\n      type: \"string\",\n      placeholder: \"Enter TLS Client Auth\",\n    },\n    {\n      name: \"sasl\",\n      label: \"SASL\",\n      tooltip: \"Set to 'on' to enable SASL authentication\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS skip verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    {\n      name: \"client_tls_cert\",\n      label: \"client TLS cert\",\n      tooltip: \"Path to client certificate for mTLS auth\",\n      type: \"path\",\n      placeholder: \"Enter TLS Client Cert\",\n    },\n    {\n      name: \"client_tls_key\",\n      label: \"client TLS key\",\n      tooltip: \"Path to client key for mTLS auth\",\n      type: \"path\",\n      placeholder: \"Enter TLS Client Key\",\n    },\n    {\n      name: \"version\",\n      label: \"Version\",\n      tooltip: \"Specify the version of the Kafka cluster e.g '2.2.0'\",\n      type: \"string\",\n      placeholder: \"Enter Kafka Version\",\n    },\n    ...commonFields,\n  ],\n  [notifyAmqp]: [\n    {\n      name: \"url\",\n      required: true,\n      label: \"URL\",\n      tooltip:\n        \"AMQP server endpoint e.g. `amqp://myuser:mypassword@localhost:5672`\",\n      type: \"url\",\n    },\n    {\n      name: \"exchange\",\n      label: \"Exchange\",\n      tooltip: \"Name of the AMQP exchange\",\n      type: \"string\",\n      placeholder: \"Enter Exchange\",\n    },\n    {\n      name: \"exchange_type\",\n      label: \"Exchange Type\",\n      tooltip: \"AMQP exchange type\",\n      type: \"string\",\n      placeholder: \"Enter Exchange Type\",\n    },\n    {\n      name: \"routing_key\",\n      label: \"Routing Key\",\n      tooltip: \"Routing key for publishing\",\n      type: \"string\",\n      placeholder: \"Enter Routing Key\",\n    },\n    {\n      name: \"mandatory\",\n      label: \"Mandatory\",\n      tooltip:\n        \"Quietly ignore undelivered messages when set to 'off', default is 'on'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"durable\",\n      label: \"Durable\",\n      tooltip:\n        \"Persist queue across broker restarts when set to 'on', default is 'off'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"no_wait\",\n      label: \"No Wait\",\n      tooltip:\n        \"Non-blocking message delivery when set to 'on', default is 'off'\",\n      type: \"on|off\",\n    },\n    {\n      name: \"internal\",\n      label: \"Internal\",\n      tooltip:\n        \"Set to 'on' for exchange to be not used directly by publishers, but only when bound to other exchanges\",\n      type: \"on|off\",\n    },\n    {\n      name: \"auto_deleted\",\n      label: \"Auto Deleted\",\n      tooltip:\n        \"Auto delete queue when set to 'on', when there are no consumers\",\n      type: \"on|off\",\n    },\n    {\n      name: \"delivery_mode\",\n      label: \"Delivery Mode\",\n      tooltip: \"Set to '1' for non-persistent or '2' for persistent queue\",\n      type: \"number\",\n      placeholder: \"Enter Delivery Mode\",\n    },\n    ...commonFields,\n  ],\n  [notifyRedis]: [\n    {\n      name: \"address\",\n      required: true,\n      label: \"Address\",\n      tooltip: \"Redis server's address. For example: `localhost:6379`\",\n      type: \"address\",\n      placeholder: \"Enter Address\",\n    },\n    {\n      name: \"key\",\n      required: true,\n      label: \"Key\",\n      tooltip: \"Redis key to store/update events, key is auto-created\",\n      type: \"string\",\n      placeholder: \"Enter Key\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"Redis server password\",\n      type: \"string\",\n      placeholder: \"Enter Password\",\n    },\n    ...commonFields,\n  ],\n  [notifyMqtt]: [\n    {\n      name: \"broker\",\n      required: true,\n      label: \"Broker\",\n      tooltip: \"MQTT server endpoint e.g. `tcp://localhost:1883`\",\n      type: \"uri\",\n      placeholder: \"Enter Brokers\",\n    },\n    {\n      name: \"topic\",\n      required: true,\n      label: \"Topic\",\n      tooltip: \"name of the MQTT topic to publish\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"username\",\n      label: \"Username\",\n      tooltip: \"MQTT username\",\n      type: \"string\",\n      placeholder: \"Enter Username\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"MQTT password\",\n      type: \"string\",\n      placeholder: \"Enter Password\",\n    },\n    {\n      name: \"qos\",\n      label: \"QOS\",\n      tooltip: \"Set the quality of service priority, defaults to '0'\",\n      type: \"number\",\n      placeholder: \"Enter QOS\",\n    },\n    {\n      name: \"keep_alive_interval\",\n      label: \"Keep Alive Interval\",\n      tooltip: \"Keep-alive interval for MQTT connections in s,m,h,d\",\n      type: \"duration\",\n      placeholder: \"Enter Keep Alive Internal\",\n    },\n    {\n      name: \"reconnect_interval\",\n      label: \"Reconnect Interval\",\n      tooltip: \"Reconnect interval for MQTT connections in s,m,h,d\",\n      type: \"duration\",\n      placeholder: \"Enter Reconnect Interval\",\n    },\n    ...commonFields,\n  ],\n  [notifyNats]: [\n    {\n      name: \"address\",\n      required: true,\n      label: \"Address\",\n      tooltip: \"NATS server address e.g. '0.0.0.0:4222'\",\n      type: \"address\",\n      placeholder: \"Enter Address\",\n    },\n    {\n      name: \"subject\",\n      required: true,\n      label: \"Subject\",\n      tooltip: \"NATS subscription subject\",\n      type: \"string\",\n      placeholder: \"Enter NATS Subject\",\n    },\n    {\n      name: \"username\",\n      label: \"Username\",\n      tooltip: \"NATS username\",\n      type: \"string\",\n      placeholder: \"Enter NATS Username\",\n    },\n    {\n      name: \"password\",\n      label: \"Password\",\n      tooltip: \"NATS password\",\n      type: \"string\",\n      placeholder: \"Enter NATS password\",\n    },\n    {\n      name: \"token\",\n      label: \"Token\",\n      tooltip: \"NATS token\",\n      type: \"string\",\n      placeholder: \"Enter NATS token\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"Set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS Skip Verify\",\n      tooltip:\n        'Trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    {\n      name: \"ping_interval\",\n      label: \"Ping Interval\",\n      tooltip: \"Client ping commands interval in s,m,h,d. Disabled by default\",\n      type: \"duration\",\n      placeholder: \"Enter Ping Interval\",\n    },\n    {\n      name: \"streaming\",\n      label: \"Streaming\",\n      tooltip: \"Set to 'on', to use streaming NATS server\",\n      type: \"on|off\",\n    },\n    {\n      name: \"streaming_async\",\n      label: \"Streaming async\",\n      tooltip: \"Set to 'on', to enable asynchronous publish\",\n      type: \"on|off\",\n    },\n    {\n      name: \"streaming_max_pub_acks_in_flight\",\n      label: \"Streaming max publish ACKS in flight\",\n      tooltip: \"Number of messages to publish without waiting for ACKs\",\n      type: \"number\",\n      placeholder: \"Enter Streaming in flight value\",\n    },\n    {\n      name: \"streaming_cluster_id\",\n      label: \"Streaming Cluster ID\",\n      tooltip: \"Unique ID for NATS streaming cluster\",\n      type: \"string\",\n      placeholder: \"Enter Streaming Cluster ID\",\n    },\n    {\n      name: \"cert_authority\",\n      label: \"Cert Authority\",\n      tooltip: \"Path to certificate chain of the target NATS server\",\n      type: \"string\",\n      placeholder: \"Enter Cert Authority\",\n    },\n    {\n      name: \"client_cert\",\n      label: \"Client Cert\",\n      tooltip: \"Client cert for NATS mTLS auth\",\n      type: \"string\",\n      placeholder: \"Enter Client Cert\",\n    },\n    {\n      name: \"client_key\",\n      label: \"Client Key\",\n      tooltip: \"Client cert key for NATS mTLS auth\",\n      type: \"string\",\n      placeholder: \"Enter Client Key\",\n    },\n    ...commonFields,\n  ],\n  [notifyElasticsearch]: [\n    {\n      name: \"url\",\n      required: true,\n      label: \"URL\",\n      tooltip:\n        \"Elasticsearch server's address, with optional authentication info\",\n      type: \"url\",\n      placeholder: \"Enter URL\",\n    },\n    {\n      name: \"index\",\n      required: true,\n      label: \"Index\",\n      tooltip:\n        \"Elasticsearch index to store/update events, index is auto-created\",\n      type: \"string\",\n      placeholder: \"Enter Index\",\n    },\n    {\n      name: \"format\",\n      required: true,\n      label: \"Format\",\n      tooltip:\n        \"'namespace' reflects current bucket/object list and 'access' reflects a journal of object operations, defaults to 'namespace'\",\n      type: \"enum\",\n      placeholder: \"Enter Format\",\n    },\n    ...commonFields,\n  ],\n  [notifyWebhooks]: [\n    {\n      name: \"endpoint\",\n      required: true,\n      label: \"Endpoint\",\n      tooltip:\n        \"webhook server endpoint e.g. http://localhost:8080/minio/events\",\n      type: \"url\",\n      placeholder: \"Enter Endpoint\",\n    },\n    {\n      name: \"auth_token\",\n      label: \"Auth Token\",\n      tooltip: \"opaque string or JWT authorization token\",\n      type: \"string\",\n      placeholder: \"Enter auth_token\",\n    },\n    ...commonFields,\n  ],\n  [notifyNsq]: [\n    {\n      name: \"nsqd_address\",\n      required: true,\n      label: \"NSQD Address\",\n      tooltip: \"NSQ server address e.g. '127.0.0.1:4150'\",\n      type: \"address\",\n      placeholder: \"Enter nsqd_address\",\n    },\n    {\n      name: \"topic\",\n      required: true,\n      label: \"Topic\",\n      tooltip: \"NSQ topic\",\n      type: \"string\",\n      placeholder: \"Enter Topic\",\n    },\n    {\n      name: \"tls\",\n      label: \"TLS\",\n      tooltip: \"set to 'on' to enable TLS\",\n      type: \"on|off\",\n    },\n    {\n      name: \"tls_skip_verify\",\n      label: \"TLS Skip Verify\",\n      tooltip:\n        'trust server TLS without verification, defaults to \"on\" (verify)',\n      type: \"on|off\",\n    },\n    ...commonFields,\n  ],\n};\n\nconst serviceToConfigMap: Record<string, string> = {\n  webhook: \"notify_webhook\",\n  amqp: \"notify_amqp\",\n  kafka: \"notify_kafka\",\n  mqtt: \"notify_mqtt\",\n  nats: \"notify_nats\",\n  nsq: \"notify_nsq\",\n  mysql: \"notify_mysql\",\n  postgresql: \"notify_postgres\", //looks different in server response(postgresql as opposed to postgres) from restapi/admin_notification_endpoints.go\n  elasticsearch: \"notify_elasticsearch\",\n  redis: \"notify_redis\",\n};\n\nexport const getNotificationConfigKey = (serviceName: string) => {\n  return serviceToConfigMap[serviceName];\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"circle\", {\n  cx: \"12\",\n  cy: \"12\",\n  r: \"8\"\n}), 'FiberManualRecord');\nexports.default = _default;"],"names":["onConfirm","onClose","serviceName","status","ConfirmDialog","title","confirmText","isOpen","titleIcon","isLoading","confirmationContent","DialogContentText","withStyles","theme","createStyles","actionsTray","settingsCommon","containerForHeader","spacing","twHeight","minHeight","tableBlock","tableStyles","rightActionItems","display","alignItems","whiteSpace","searchField","maxWidth","classes","dispatch","useAppDispatch","navigate","useNavigate","useState","records","setRecords","filter","setFilter","setIsLoading","isDelConfirmOpen","setIsDelConfirmOpen","selNotifyEndPoint","setSelNotifyEndpoint","useEffect","api","then","res","resNotEndList","notification_endpoints","notificationTransform","catch","err","setErrorSnackMessage","tableActions","type","onClick","record","filteredRecords","b","service_name","indexOf","Fragment","PageLayout","Grid","item","xs","className","SearchBox","placeholder","onChange","overrideClass","value","TooltipWrapper","tooltip","id","label","variant","icon","IAM_PAGES","LinearProgress","length","TableWrapper","itemActions","columns","elementKey","renderFunction","style","FiberManualRecord","color","red","width","entityName","idField","customPaperHeight","iconComponent","help","href","target","rel","container","justifyContent","alignContent","AButton","ep","name","configKey","getNotificationConfigKey","accountId","account_id","setServerNeedsRestart","console","log","resetNotificationConfig","notifyPostgres","notifyMysql","notifyKafka","notifyAmqp","notifyMqtt","notifyRedis","notifyNats","notifyElasticsearch","notifyWebhooks","notifyNsq","notificationElements","map","element","service","servicesList","actionTrigger","targetTitle","logo","commonFields","required","removeEmptyFields","formFields","field","notificationEndpointsFields","serviceToConfigMap","webhook","amqp","kafka","mqtt","nats","nsq","mysql","postgresql","elasticsearch","redis","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","cx","cy","r"],"sourceRoot":""}